diff --git a/README.md b/README.md
index 90c1d2a..fc54c40 100644
--- a/README.md
+++ b/README.md
@@ -22,6 +22,8 @@ あるリポジトリの複数のブランチ(commit,tag)を指定して，コ
   * 命名規則
     * WIP
 * コピー先のworking directoryはgit内に存在する設定ファイル(yml)のdirectory
+* ymlの設定ファイルの書き方はexampleを参照
+  * 特に，省略する場合の記述に注意
 
 ## 実装内容
 * 現在のブランチをまるごとtmp directoryにコピーすることを繰り返す
diff --git a/example/build.sh b/example/build.sh
index 1ae48b4..37d91db 100755
--- a/example/build.sh
+++ b/example/build.sh
@@ -1,2 +1,16 @@
 #!/usr/bin/env bash
+
+# e.g.
+# NOTE: build step
+# touch <.cpp file>
+# make
+
 echo "build $GIT_MULTI_BRANCH_EXECUTER_NAME"
+
+# e.g.
+# NOTE: send file step
+# scp
+
+# e.g.
+# NOTE: run step
+# ssh
diff --git a/example/git-multi-branch-exec.yml b/example/git-multi-branch-exec.yml
index bde15d4..66a9f15 100644
--- a/example/git-multi-branch-exec.yml
+++ b/example/git-multi-branch-exec.yml
@@ -6,6 +6,10 @@
   scripts:
     - ls
     - pwd
-    - build.sh
+    - ./build.sh
 - name:     pattern2
-  checkout: ""
+  checkout:
+  patches:
+    -
+  scripts:
+    -
diff --git a/git-multi-branch-exec.sh b/git-multi-branch-exec.sh
index 99e0f46..75c88c7 100755
--- a/git-multi-branch-exec.sh
+++ b/git-multi-branch-exec.sh
@@ -5,17 +5,37 @@ set -eux
 
 # NOTE: required yq
 
+# ----
+# util function
+# ----
+
+function abspath() {
+  local target=${1:-.}
+  if [[ $(uname) == "Darwin" ]]; then
+    if [[ $target =~ ^/.* ]]; then
+      printf '%s' "$target"
+    else
+      printf '%s' "$PWD/${target#./}"
+    fi
+  else
+    readlink -f $target
+  fi
+}
+
+# ----
+
 setting_filepath="git-multi-branch-exec.yml"
 if [[ $1 == '-y' ]]; then
   shift 1
   [[ $# -lt 1 ]] && echo "-y <path to yml>" 2>&1 && exit 1
-  setting_filepath="$1"
+  setting_filepath="$(abspath $1)"
   shift 1
 fi
 [[ $# -lt 1 ]] && echo "$(basename "$0") command" 2>&1 && exit 1
 cmd="$1"
 
-app_name="git-multi-beanch-executer"
+app_name="git-multi-branch-executer"
+app_name_suffix=${GIT_MULTI_BRANCH_EXECUTER_SUFFIX_NAME:-_$(date +'%Y-%m-%d-%H-%M-%S')}
 repo_name=$(basename $(git rev-parse --show-toplevel))
 
 if [[ ! -e $setting_filepath ]]; then
@@ -29,26 +49,35 @@ relative_setting_filepath=${setting_filepath#$repo_root}
 relative_setting_filename=$(basename $relative_setting_filepath)
 relative_working_dirpath=$(dirname $relative_setting_filepath)
 
+function echo_tmp_git_repo() {
+  local name=$1
+  local tmpdir="$HOME/.cache/${app_name}${app_name_suffix}/$repo_name"
+  echo "$tmpdir"
+}
+
 function clean_tmp_git_repo() {
   local name=$1
-  local tmpdir="$HOME/.cache/$app_name/$repo_name"
+  local tmpdir=$(echo_tmp_git_repo "$name")
   local new_root="$tmpdir/$name"
   [[ $(basename "$new_root") == ".cache" ]] && echo "invalid tmpdir" 2>&1 && return 1
   rm -rf "$new_root"
 }
 
-function copy_git_repo() {
+function new_git_repo() {
   local name=$1
-  local tmpdir="$HOME/.cache/$app_name/$repo_name"
+  local tmpdir=$(echo_tmp_git_repo "$name")
   echo "[LOG] tmpdir is $tmpdir" 2>&1
   mkdir -p "$tmpdir"
   local repo_root=$(git rev-parse --show-toplevel)
   local new_root="$tmpdir/$name"
-  echo "[LOG] copy $repo_root to $new_root" 2>&1
+  echo "[LOG] new $repo_root to $new_root" 2>&1
   cp -r "$repo_root" "$new_root"
+
   local _PWD="$PWD"
   cd "$new_root/$relative_working_dirpath"
-  init "$name"
+  init "$name" | tee ".${app_name}_init.log"
+  apply_patches "$name" | tee ".${app_name}_apply_patches.log"
+  run_scripts "$name" | tee ".${app_name}_run_scripts.log"
   cd "$_PWD"
 }
 
@@ -77,7 +106,7 @@ function init() {
   echo "[LOG] yml data of $name" 2>&1
   echo $yml_data
   local checkout=$(printf '%s' "$yml_data" | yq -r '.[].checkout')
-  if [ -n "$checkout" ]; then
+  if [[ -n "$checkout" ]] && [[ "$checkout" != "null" ]]; then
     echo "[LOG] checkout $checkout with git stash" 2>&1
     git stash
     git checkout "$checkout"
@@ -85,12 +114,9 @@ function init() {
   else
     echo "[LOG] no checkout" 2>&1
   fi
-
-  apply_patch "$name"
-  run_script "$name"
 }
 
-function apply_patch() {
+function apply_patches() {
   local name=${1-:$(basename $PWD)}
   local ret=$(echo_patches "$name")
   for patch in $(printf '%s' "$ret"); do
@@ -99,7 +125,7 @@ function apply_patch() {
   done
 }
 
-function echo_run_scripts() {
+function run_scripts() {
   local name=${1-:$(basename $PWD)}
   local ret=$(echo_run_scripts "$name")
   export GIT_MULTI_BRANCH_EXECUTER_NAME=$name
@@ -111,12 +137,18 @@ function echo_run_scripts() {
 
 # TODO: Add clean command
 
-if [[ $cmd == "copy" ]]; then
+if [[ $cmd == "new" ]]; then
+  shift
+  for name in $(echo_pattern_names); do
+    echo "[LOG] new: pattern name $name"
+    new_git_repo "$name"
+  done
+  exit $?
+elif [[ $cmd == "clean" ]]; then
   shift
   for name in $(echo_pattern_names); do
-    echo "[LOG] pattern name $name"
+    echo "[LOG] clean: pattern name $name"
     clean_tmp_git_repo "$name"
-    copy_git_repo "$name"
   done
   exit $?
 fi
